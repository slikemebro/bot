# -*- coding: utf-8 -*-
import asyncio

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.handler import current_handler, CancelHandler
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.types import CallbackQuery
from aiogram.utils.exceptions import Throttled

import config
import menu
from statess import *

# config_name = "config.ini"

bot = Bot(config.API_BOT, parse_mode='HTML')

dp = Dispatcher(bot,storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)
bd = 'data/database.db'

reported_users = {}
GROUP_ID = 531368227
REPORT_ID = 531368227
REPORT_TIME = 15 * 60

print('–í–æ—Ä–∫–µ—Ä –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω [+]')


@dp.message_handler(commands="start", state='*')
async def start(message: types.Message):
    await message.answer('üçÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ICloudTeam', reply_markup=menu.prinsogl)


@dp.callback_query_handler(text='rules')
async def registration(call: CallbackQuery):
    await call.message.answer(f'üõ†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–º–∏, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–æ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.', parse_mode='HTML')
    await call.message.answer("<b>–û—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?</b>\n–ù–∞–ø—Ä–∏–º–µ—Ä: —Ä–µ–∫–ª–∞–º–∞ –≤ @TelegramChanel. –ò–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–ª @username", parse_mode='HTML')
    await NewUserForm.time.set()


@dp.message_handler(state=NewUserForm.time)
async def answer_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text)
    await message.answer("<b>–ë—ã–ª –ª–∏ –æ–ø—ã—Ç –∏ –≥–¥–µ?</b>\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2 –º–µ—Å—è—Ü–∞ –≤ –Ω—Ñ—Ç, –≤–æ—Ä–∫–∞–ª –≤ ‚Ä¶ –¢–∏–º–µ", parse_mode='HTML')
    await NewUserForm.next()

# @dp.message_handler(state=NewUserForm.info)
# async def answer_time(message: types.Message, state: FSMContext):
#     await state.update_data(info=message.text)
#     await message.answer("<b>–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –í—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ?</b>", parse_mode='HTML')
#     await NewUserForm.next()

@dp.message_handler(state=NewUserForm.experience)
async def answer_exp(message: types.Message, state: FSMContext):
    await state.update_data(exp=message.text)
    data = await state.get_data()
    await message.answer(f"üñ®Ô∏è <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã</b>\n\n‚è≥–ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ ~ 3 —á–∞—Å–∞")
    if message.from_user.username:
        username = f'@{message.from_user.username}'
    else:
        username = message.from_user.first_name
    # try:
        # ref = int(data.get('time'))
    # except:
    #     ref = 0
    await bot.send_message(GROUP_ID, f"<b>–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –æ—Ç @{message.from_user.username}\n</b>"
                                  f"ID: <b>{message.from_user.id}</b>\n\n"
                                  # f"1. <b>{data.get('time')}</b>\n"
                                  f"1. <b>{data.get('exp')}</b>\n"
                                  f"2. <b>{data.get('info')}</b>\n",reply_markup=menu.admin_pick(username, message.from_user.id, 0))
    await state.finish()


@dp.callback_query_handler(menu.user_info_callback.filter(status='1'))
async def accept_form(call: CallbackQuery, callback_data: dict):
    await call.bot.edit_message_text(call.message.text + f"\n\n‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ {callback_data.get('username')}",
                                     call.message.chat.id, call.message.message_id)
    await call.bot.send_message(callback_data.get("user_id"), 'ü•≥')
    await call.bot.send_message(callback_data.get("user_id"),
                                'üîí <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É. –í—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ –∫–æ–º–∞–Ω–¥—É.</b>\n\n–í—Å—Ç—É–ø–∞–π—Ç–µ –≤ —á–∞—Ç –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å!\n<b>–£–¥–∞—á–Ω—ã—Ö –ø—Ä–æ—Ñ–∏—Ç–æ–≤!</b>',
                                reply_markup=menu.links, parse_mode='HTML')

    # with sqlite3.connect(bd) as c:
    #     c.execute('INSERT INTO workers VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', (
    #     callback_data.get("user_id"), callback_data.get('username'), random.randint(79023457654, 79869999999),
    #     random.randint(000000, 999999), '0', '0', '1000', random.randint(5536910000000000, 5536919999999999), '0', '0',
    #     '0', '0', '0', '0', callback_data.get('ref'), datetime.now().strftime("%d.%m.%Y %H:%M:%S"), '0'))
    #     c.execute('UPDATE stat SET workers = workers + ? WHERE nice = ?', ('1', '777',))


@dp.callback_query_handler(menu.user_info_callback.filter(status='0'))
async def decline_form(call: CallbackQuery, callback_data: dict):
    await call.bot.edit_message_text(call.message.text + f"\n\nüõë –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π. {callback_data.get('username')}",
                                     call.message.chat.id, call.message.message_id)
    await call.bot.send_message(callback_data.get("user_id"), "<b>üõë –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>", parse_mode='HTML')


executor.start_polling(dp)